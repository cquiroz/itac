<%-- See _proposal_sort_generators.jspf for documentation

Params:

{bandings} : all bandings that are to be sorted

{ instruments_by_band } : a map whose keys are of the form banding.band.rank + instrument name "1GMOS-N", "2NIRI", etc.

--%>

<%-- Strange workaround because EL 'replace()' function won't work with '\n' --%>
<% pageContext.setAttribute("newLineChar", "\n"); %>

<script type="text/javascript">

//Compares the values of the 'key' field of two objects
function key_compare(a,b) {
  return (a.key > b.key ? 1 : ((a.key < b.key) ? -1 : 0));
}

//Sorted by band, partner abbreviation and proposal key value
function band_partner_sort() {
    return [
        <c:forEach items="${queue.bandings}" var="banding" varStatus="status">
			<c:set var="proposal" value="${banding.proposal}"/>
            {"key" : "<c:out value="${banding.band.rank}_${proposal.partner.abbreviation}_${proposal.phaseIProposal.submissionsKey}" escapeXml="true"/>"  ,
                "value" : "${proposal.id}" }${not status.last ? ',' : ''}</c:forEach>
    ].sort(key_compare);
}

//Sorted by band and merge index
function band_merge_index_sort() {
    return [
        <c:forEach items="${queue.bandings}" var="banding" varStatus="status">
			<c:set var="proposal" value="${banding.proposal}"/>
            {"key" : "<c:out value="${banding.band.rank}_${banding.mergeIndex}" escapeXml="true"/>"  ,
                "value" : "${proposal.id}" }${not status.last ? ',' : ''}</c:forEach>
    ].sort(key_compare);
}


//Sorted by band, then PI last name and first name
function band_primary_investigator_sort() {
    return [
        <c:forEach items="${queue.bandings}" var="banding" varStatus="status">
			<c:set var="proposal" value="${banding.proposal}"/>
        { "key" : "<c:out value="${banding.band.rank}_${proposal.phaseIProposal.investigators.pi.lastName} ${proposal.phaseIProposal.investigators.pi.firstName}" escapeXml="true"/>",
            "value" : "${proposal.id}" }${not status.last ? ',' : ''}</c:forEach>
    ].sort(key_compare);
}

//Sorted by band, then instrument (from proposal.phaseIProposal.observations.resourceSet ultimately)
function band_instrument_sort() {
    return [
        <c:forEach items="${instruments_by_band}" var="kv" varStatus="status">
        { "key" : "${kv.value}" ,
            "value" : "${kv.key}" }${not status.last ? ',' : ''}</c:forEach>
    ].sort(key_compare);
}

//Sorted by proposal title
function band_title_sort() {
    return [
		<c:forEach items="${queue.bandings}" var="banding" varStatus="status">
		<c:set var="proposal" value="${banding.proposal}"/>
        <c:set var="title" value="${fn:replace(proposal.phaseIProposal.title, newLineChar, ' ')}"/>
        { "key" : "${banding.band.rank}_<c:out value="${title}" escapeXml="true"/>",
            "value" : "${proposal.id}" }${not status.last ? ',' : ''}</c:forEach>
    ].sort(key_compare);
}

</script>